---
description: 
globs: 
alwaysApply: true
---
# TypeScript/JavaScript コーディング規約

## インポートの整理
- インポートは種類ごとにグループ化してください: 外部ライブラリ、内部モジュール、相対パスインポートの順。
- 利用可能な場合は、パスエイリアスを使用した絶対パスインポートを使用してください。
- モジュール間の循環依存を避けてください。
- バンドルサイズを削減するため、必要なものだけをインポートしてください。

## TypeScriptガイドライン
- `any`型を避けてください。型は常に明確に指定してください。
- オブジェクトの形状には`interface`を、ユニオンやインターセクションには`type`を使用してください。
- 適切な場面でTypeScriptの型推論を活用してください。
- `@ts-ignore`を使用せず、型に関する問題を適切に解決してください。
- `strictNullChecks`を有効にし、`undefined`/`null`を明示的に処理してください。

## コードスタイル
- 読みやすさ向上のため、Promiseチェーンよりも`async/await`を優先してください。
- 再代入されない変数には`let`よりも`const`を優先してください。
- オプショナルチェイニング (`?.`) と Null合体演算子 (`??`) を活用してください。
- 可能な限り関数を純粋に保ってください。
- コールバックや短い関数にはアロー関数を使用してください。

## エラーハンドリング
- エラーの種類に応じてカスタムエラークラスを使用してください。
- 適切な境界でエラーを明示的に処理してください。
- デバッグに役立つ、意味のあるエラーメッセージを提供してください。
- `try/catch`ブロックを制御フローとしてではなく、慎重に使用してください。
- トラブルシューティングのために十分なコンテキストを含むエラーログを出力してください。

## ブロックチェーン特有のルール
- 大きい数値やweiの計算には常に`BigInt`を使用してください。
- Ethereumアドレスは適切な正規表現やライブラリを使用してバリデーションしてください。
- `0x`プレフィックスを含む適切な16進文字列フォーマットを使用してください。
- トランザクションの失敗に適切に対処してください。
- 適切なガス推定と料金計算を実装してください。

## パフォーマンス
- ループ内での不要な再計算を避けてください。
- タスクに適したデータ構造を使用してください。
- 負荷の高い操作は可能な限りキャッシュしてください。
- 頻繁に呼び出される箇所でのオブジェクト生成を最小限に抑えてください。
- パフォーマンスが重要な場合はコードをプロファイリングしてください。

## セキュリティ
- すべてのユーザー入力をサニタイズしてください。
- インジェクションを防ぐため、パラメータ化されたクエリ/呼び出しを使用してください。
- 境界（APIエンドポイント、ファイルI/O）でデータをバリデーションしてください。
- 機密情報をログに出力しないでください。
- 暗号学的操作には安全な乱数生成を使用してください。
