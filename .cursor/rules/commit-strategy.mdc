---
description: 
globs: 
alwaysApply: true
---
# Commit Message Strategy Guidelines

## Format Requirements

該当ファイルについて、Conventional Commits（<type>(<scope>): <description>）に準拠し、小さな単位（機能など）ごとにコミットメッセージを英語で作成してください。
私がgit addとgit commitをするので、あなたはその提案だけをして実際にgit addやgit commitはしないでください。

以下のフォーマットに従って、コミット戦略を立ててください：

## Commit Strategy Format

```
1. <コミットメッセージ，<description>は小文字かつ命令形で始める>
- <コミットするファイルの相対パス（eth-offline-signer/以下）L<行数> - L<行数>>
```
// 具体的な実装内容
```
 <コミットするファイルの相対パス（eth-offline-signer/以下）L<行数> - L<行数>>
```
 // 具体的な実装内容
```

2. <コミットメッセージ，<description>は小文字かつ命令形で始める>
 <コミットするファイルの相対パス（eth-offline-signer/以下）L<行数> - L<行数>>
```
 // 具体的な実装内容
```

n. <コミットメッセージ，<description>は小文字かつ命令形で始める>
 <コミットするファイルの相対パス（eth-offline-signer/以下）L<行数> - L<行数>>
```
 // 具体的な実装内容
```

PR（1 - n）: <PRメッセージを<type>から>
## Changes
- <何をやったかについて記載する，命令形かつ小文字で始める>
- <何をやったかについて記載する，命令形かつ小文字で始める>
- <何をやったかについて記載する，命令形かつ小文字で始める>

## Technical Details:
- <なぜそうしたのか，命令形かつ小文字で始める>
- <なぜそうしたのか，命令形かつ小文字で始める>
- <なぜそうしたのか，命令形かつ小文字で始める>
```

## Conventional Commits Types

- **feat**: 新機能の追加
- **fix**: バグ修正
- **refactor**: リファクタリング（機能変更なし）
- **perf**: パフォーマンス改善
- **test**: テスト追加・修正
- **docs**: ドキュメント変更
- **style**: コードスタイル変更（機能に影響しない）
- **build**: ビルドシステムや外部依存関係の変更
- **ci**: CI設定ファイルの変更
- **chore**: その他のメンテナンス作業

## Scope Guidelines

- **core**: `src/core/` 配下のファイル
- **types**: `src/types/` 配下のファイル  
- **utils**: `src/utils/` 配下のファイル
- **cli**: `src/cli/` 配下のファイル
- **docs**: ドキュメント関連
- **config**: 設定ファイル関連

## Commit Size Guidelines

- 1コミットは1つの論理的変更に対応
- 各コミットは独立してビルド・テスト可能
- 50文字以内の簡潔な説明
- 機能単位での分割を推奨
