---
description: 
globs: 
alwaysApply: true
---
# アーキテクチャと設計原則

## 階層型アーキテクチャ

確立された4層アーキテクチャに従ってください:

1.  **CLI層** (`src/cli/`): プレゼンテーション層
   -   **責務**: ユーザーインターフェース、入出力制御
   -   **技術**: commander.js
   -   **依存関係**: アプリケーション層のみ

2.  **アプリケーション層** (`src/core/`): ビジネスロジック層
   -   **責務**: ビジネスロジックの調整、ワークフロー制御
   -   **技術**: TypeScript, viem
   -   **依存関係**: ドメイン層, インフラストラクチャ層

3.  **ドメイン層** (`src/types/`): ドメインモデル層
   -   **責務**: ビジネスルール、データモデル
   -   **技術**: Zod, TypeScript
   -   **依存関係**: なし (純粋)

4.  **インフラストラクチャ層** (`src/utils/`): インフラ層
   -   **責務**: 横断的関心事、外部リソースアクセス
   -   **技術**: Node.js File System
   -   **依存関係**: なし (純粋)

## 設計原則

### 関心の分離 (Separation of Concerns)
- 各モジュールは単一で明確に定義された責務を持つべきです。
- ファイルI/O、バリデーション、ビジネスロジックを同じ関数に混ぜないでください。
- 各層は独立性を保ち、それぞれの役割に集中してください。

### 単一責任の原則 (SRP)
- `keyManager.ts`: 秘密鍵の安全な取得と管理のみ
- `signer.ts`: トランザクション署名処理のみ
- `schema.ts`: 入力データバリデーションのみ
- `errors.ts`: エラー定義とハンドリングのみ

### 過剰なエンジニアリングの回避
- インターフェース分離は、本当に必要な場合にのみ使用してください。
- ファクトリーパターンは、複数の実装が存在する場合にのみ適用してください。
- ストラテジーパターンは、アルゴリズムの選択が必要な場合にのみ使用してください。
- シンプルさを保つため、クラスベースよりも関数ベースのアプローチを優先してください。

### 関数ベースの実装スタイル
```typescript
// ✅ 推奨: 関数ベース (シンプルで軽量)
export async function loadPrivateKey(keyFile: string): Promise<LoadPrivateKeyResult>
export async function signEIP1559TransactionOffline(privateKey: string, txParams: EIP1559TxParams): Promise<Hex>

// ❌ 回避: クラスベース (このプロジェクトでは複雑で過剰)
export class PrivateKeyManager { /* ... */ }
export class TransactionSigner { /* ... */ }
```

## 依存関係のルール
- CLI層はアプリケーション層にのみ依存します。
- アプリケーション層はドメイン層とインフラストラクチャ層に依存できます。
- ドメイン層は依存関係を持ちません（純粋）。
- インフラストラクチャ層は依存関係を持ちません（純粋）。
- **下位層が上位層に依存することは絶対に許可されません。**

## レイヤーごとのテスト戦略
- **ドメイン層**: 純粋関数のテスト（最重要）
- **アプリケーション層**: モックを使用したビジネスロジックのテスト
- **インフラストラクチャ層**: 外部リソースのモックテスト
- **CLI層**: エンドツーエンドの統合テスト

## EIP-1559トランザクションへの集中
- すべてのトランザクション処理はEIP-1559に準拠すべきです。
- `maxFeePerGas`と`maxPriorityFeePerGas`パラメータをサポートしてください。
- レガシータイプのトランザクションは、明示的に要求された場合にのみ対応してください。
