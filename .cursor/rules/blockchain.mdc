---
description: 
globs: 
alwaysApply: true
---
# ブロックチェーン開発ルール

## トランザクション処理
- 署名前に必ずzodスキーマでトランザクションパラメータをバリデーションしてください。
- `nonceRetry.ts`のパターンのように、リトライロジックを伴う適切なNonce管理を使用してください。
- ネットワーク障害に対する包括的なエラーハンドリングを実装してください。
- トランザクションの状態と承認フィードバックを明確に提供してください。
- トランザクションハッシュを表示する前に、トランザクションのマイニング完了を待ってください。
- EIP-1559トランザクション形式のみをサポートしてください。

## セキュリティ要件
- プライベートキーはいかなる形式でもログに出力したり、公開したりしないでください。
- すべての暗号学的入力はzodで徹底的にバリデーションしてください。
- 安全な鍵生成とストレージ管理を実践してください。
- 機密性の高い操作には適切なアクセス制御を実装してください。
- すべての暗号学的操作を定期的に監査してください。
- 秘密鍵ファイルには400のファイルパーミッションを強制してください。
- 秘密鍵には`.key`拡張子のみを受け付けてください。

## ネットワーク互換性
- 複数のEthereumネットワーク（mainnet, testnets, Anvil）をサポートしてください。
- ネットワーク固有の設定（`NETWORK_CONFIGS`）を適切に処理してください。
- 適切なチェーンIDのバリデーションを実装してください。
- 各ネットワークに適したガス設定を使用してください。
- ネットワークの輻輳に適切に対処してください。
- chainIdに基づいて動的なチェーン選択をサポートしてください。

## エラー回復とリトライロジック
- 指数関数的バックオフを伴うリトライロジックを一時的な障害に対して実装してください。
- Nonceの競合はNonceインクリメントで自動的に処理してください。
- ユーザーには意味のあるエラーメッセージを日本語で提供してください。
- デバッグ用に十分な情報をログに出力してください。
- 障害が発生しているサービスに対してサーキットブレーカーパターンを使用してください。
- テスト可能なリトライメカニズムのために依存性注入を使用してください。

## ガス管理 (EIP-1559)
- viemを使用して適切なガス推定を実装してください。
- ガスの価格変動に対応してください。
- EIP-1559の料金体系（`maxFeePerGas`, `maxPriorityFeePerGas`）をサポートしてください。
- ガスの最適化に関する推奨事項を提供してください。
- out-of-gasのシナリオに適切に対処してください。
- すべてのガス計算にBigIntを使用してください。

## オフライン署名の実装
- 署名（`signer.ts`）の完全なオフライン機能を確保してください。
- ブロードキャスト前に署名済みトランザクションをバリデーションしてください。
- エアギャップ環境をサポートしてください。
- `viem/accounts`を使用して適切な鍵導出を実装してください。
- 型安全性のために`TransactionSerializableEIP1559`型を使用してください。
- 必要な場合はEIP-2930互換性のために`accessList`を処理してください。

## トランザクション処理アーキテクチャ
- 署名ロジック（`signer.ts`）とブロードキャストロジック（`broadcaster.ts`）を分離してください。
- 完全なフローを調整するために`transactionProcessor.ts`を使用してください。
- 適切なトランザクションレシートの待機処理を実装してください。
- オフラインのみモードとブロードキャストモードの両方をサポートしてください。
- 包括的なトランザクションステータスレポートを提供してください。

## テスト要件
- 複数のネットワーク構成（Sepolia, Anvil, Mainnet）でテストしてください。
- ユニットテストではすべての外部ブロックチェーンとのやり取りをモックしてください。
- エラーシナリオ（ネットワーク障害、Nonce競合）を徹底的にテストしてください。
- 既知のテストベクターで暗号学的操作をバリデーションしてください。
- 統合テストには実際のテストネットトランザクションを使用してください。
- テストでトランザクションのマイニング完了を確認してください。

## viem統合のベストプラクティス
- viemの組み込みチェーン設定（`sepolia`, `mainnet`）を使用してください。
- トランザクションパラメータにはviemの型安全性を活用してください。
- マイニング確認には`publicClient.waitForTransactionReceipt`を使用してください。
- viem固有のエラータイプに適切に対処してください。
- viemのアドレスバリデーションと16進文字列処理を使用してください。
- フォールバック付きの適切なRPCクライアント設定を実装してください。

## アクセスリスト処理 (EIP-2930)
- トランザクションスキーマで`accessList`パラメータをサポートしてください。
- zodで`accessList`の構造をバリデーションしてください。
- viemトランザクションで`accessList`のシリアライゼーションを処理してください。
- EIP-1559トランザクションにおける`accessList`の必要性を考慮してください。
- `accessList`が必要な場合について明確なドキュメントを提供してください。
