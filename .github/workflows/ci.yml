name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Run Biome lint
        run: pnpm run lint

      - name: Run TypeScript type check
        run: pnpm run type-check

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: ['18', '20', '22']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ matrix.node-version }}

      - name: Run tests
        run: pnpm run test

      - name: Run test coverage
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '18'
        run: pnpm run test:coverage

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-node${{ matrix.node-version }}
          path: |
            coverage/
            test-results.xml
          retention-days: 30

      - name: Upload coverage reports
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '18'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Run security audit
        run: |
          echo "🔍 Running security audit..."
          if ! pnpm audit --audit-level=moderate; then
            echo "::error::Moderate-level security vulnerabilities detected"
            echo "Please run 'pnpm audit --audit-level=moderate' locally to see details"
            exit 1
          fi
          echo "✅ No Moderate-level security vulnerabilities found"

      - name: Check for known vulnerabilities
        run: |
          echo "🔍 Checking for known vulnerabilities in dependencies..."
          pnpm audit --audit-level=low --json > audit-results.json || true
          if [ -s audit-results.json ]; then
            echo "::warning::Low-level vulnerabilities found. Review recommended."
          fi

      - name: Upload security audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: audit-results.json
          retention-days: 30

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Build application
        run: |
          echo "🔨 Building application..."
          pnpm run build
          echo "✅ Build completed successfully"

      - name: Verify build outputs
        run: |
          echo "🔍 Verifying build outputs..."
          if [ ! -f "dist/cli.cjs" ]; then
            echo "::error::CLI build output not found"
            exit 1
          fi
          if [ ! -f "dist/index.cjs" ]; then
            echo "::error::Library CJS build output not found"
            exit 1
          fi
          if [ ! -f "dist/index.mjs" ]; then
            echo "::error::Library ESM build output not found"
            exit 1
          fi
          echo "✅ All build outputs verified"

      - name: Test built CLI
        run: |
          echo "🧪 Testing built CLI..."
          node dist/cli.cjs --version
          node dist/cli.cjs --help

      - name: Create test files for CLI validation
        run: |
          echo "📝 Creating test files..."
          echo "0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef" > test-build-key.key
          chmod 600 test-build-key.key
          echo '{"to":"0x742d35cc6633c0532925a3b8d5c0e1985b0f8e7f","value":"1000000000000000000","chainId":1,"nonce":0,"gasLimit":"21000","maxFeePerGas":"30000000000","maxPriorityFeePerGas":"2000000000"}' > test-build-params.json

      - name: Test CLI signing functionality
        run: |
          echo "🔐 Testing CLI signing functionality..."
          RESULT=$(node dist/cli.cjs sign --key-file test-build-key.key --params test-build-params.json)
          echo "Signing result: $RESULT"
          if [[ $RESULT =~ ^0x[0-9a-fA-F]+$ ]]; then
            echo "✅ CLI signing test passed"
          else
            echo "::error::CLI signing test failed - invalid output format"
            exit 1
          fi

      - name: Clean up test files
        if: always()
        run: |
          rm -f test-build-key.key test-build-params.json

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            dist/
            package.json
            README.md
          retention-days: 90

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Build application
        run: pnpm run build

      - name: Extract version
        id: extract_version
        run: echo "version=$(node -p 'require("./package.json").version')" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          # Generate changelog since last tag
          if [ -n "$LATEST_TAG" ]; then
            CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges --max-count=10)
          fi

          # Create release notes
          cat <<-EOF > release_notes.md
          ## Changes in this Release

          ### Recent Commits
          $CHANGELOG

          ### Features
          - EIP-1559 offline transaction signing
          - Support for private key input via file or environment variable
          - Comprehensive input validation with Zod schemas
          - Security features (file permission checks, memory cleanup)
          - Cross-platform compatibility (Linux, macOS, Windows)

          ### Technical Details
          - Node.js ≥18.0.0 support
          - TypeScript implementation with strict type checking
          - Comprehensive test coverage with Vitest
          - Multi-platform compatibility
          - pnpm ≥9.0.0 for optimal dependency management

          ### Installation
          ```bash
          # Using pnpm (recommended)
          pnpm add -g eth-offline-signer@${{ steps.extract_version.outputs.version }}

          # Using npm (also supported)
          npm install -g eth-offline-signer@${{ steps.extract_version.outputs.version }}
          ```

          ### Usage
          ```bash
          # Sign transaction with private key file
          eth-offline-signer sign --key-file private.key --params transaction.json

          # Sign transaction with environment variable
          PRIVATE_KEY=0x... eth-offline-signer sign --params transaction.json
          \`\`\`

          ### Security Notes
          - Always use file permissions 600 or 400 for private key files
          - Run in offline environment for maximum security
          - Verify transaction parameters before signing
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.extract_version.outputs.version }}
          name: Release v${{ steps.extract_version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false