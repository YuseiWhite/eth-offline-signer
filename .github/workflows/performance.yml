name: Performance Monitoring

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Sundays at 02:00 UTC
    - cron: '0 2 * * 0'

jobs:
  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Build application
        run: pnpm run build

      - name: Measure build performance
        run: |
          echo "📊 Measuring build performance..."

          # Measure build time
          START_TIME=$(date +%s%N)
          pnpm run build
          END_TIME=$(date +%s%N)
          BUILD_TIME=$(( (END_TIME - START_TIME) / 1000000 ))

          echo "Build time: ${BUILD_TIME}ms"
          echo "BUILD_TIME=${BUILD_TIME}" >> $GITHUB_ENV

      - name: Measure CLI startup performance
        run: |
          echo "⚡ Measuring CLI startup performance..."

          # Measure CLI startup time (help command)
          START_TIME=$(date +%s%N)
          node dist/cli.cjs --help > /dev/null
          END_TIME=$(date +%s%N)
          STARTUP_TIME=$(( (END_TIME - START_TIME) / 1000000 ))

          echo "CLI startup time: ${STARTUP_TIME}ms"
          echo "STARTUP_TIME=${STARTUP_TIME}" >> $GITHUB_ENV

      - name: Measure signing performance
        run: |
          echo "🔐 Measuring signing performance..."

          # Create test files
          echo "0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef" > perf-test-key.key
          chmod 600 perf-test-key.key
          echo '{"to":"0x742d35cc6633c0532925a3b8d5c0e1985b0f8e7f","value":"1000000000000000000","chainId":1,"nonce":0,"gasLimit":"21000","maxFeePerGas":"30000000000","maxPriorityFeePerGas":"2000000000"}' > perf-test-params.json

          # Measure signing time
          START_TIME=$(date +%s%N)
          node dist/cli.cjs sign --key-file perf-test-key.key --params perf-test-params.json > /dev/null
          END_TIME=$(date +%s%N)
          SIGNING_TIME=$(( (END_TIME - START_TIME) / 1000000 ))

          echo "Transaction signing time: ${SIGNING_TIME}ms"
          echo "SIGNING_TIME=${SIGNING_TIME}" >> $GITHUB_ENV

          # Clean up
          rm -f perf-test-key.key perf-test-params.json

      - name: Check build size
        run: |
          echo "📦 Checking build size..."

          CLI_SIZE=$(stat -c%s "dist/cli.cjs" 2>/dev/null || stat -f%z "dist/cli.cjs")
          LIB_CJS_SIZE=$(stat -c%s "dist/index.cjs" 2>/dev/null || stat -f%z "dist/index.cjs")
          LIB_ESM_SIZE=$(stat -c%s "dist/index.mjs" 2>/dev/null || stat -f%z "dist/index.mjs")

          echo "CLI bundle size: ${CLI_SIZE} bytes"
          echo "Library CJS size: ${LIB_CJS_SIZE} bytes"
          echo "Library ESM size: ${LIB_ESM_SIZE} bytes"

          echo "CLI_SIZE=${CLI_SIZE}" >> $GITHUB_ENV
          echo "LIB_CJS_SIZE=${LIB_CJS_SIZE}" >> $GITHUB_ENV
          echo "LIB_ESM_SIZE=${LIB_ESM_SIZE}" >> $GITHUB_ENV

      - name: Performance thresholds check
        run: |
          echo "🎯 Checking performance thresholds..."

          # Define thresholds (in milliseconds and bytes)
          BUILD_THRESHOLD=5000      # 5 seconds
          STARTUP_THRESHOLD=1000    # 1 second
          SIGNING_THRESHOLD=2000    # 2 seconds
          CLI_SIZE_THRESHOLD=500000 # 500KB
          LIB_CJS_THRESHOLD=300000  # 300KB
          LIB_ESM_THRESHOLD=300000  # 300KB

          FAILED=false

          if [ "$BUILD_TIME" -gt "$BUILD_THRESHOLD" ]; then
            echo "::error::Build time (${BUILD_TIME}ms) exceeds threshold (${BUILD_THRESHOLD}ms)"
            FAILED=true
          fi

          if [ "$STARTUP_TIME" -gt "$STARTUP_THRESHOLD" ]; then
            echo "::error::CLI startup time (${STARTUP_TIME}ms) exceeds threshold (${STARTUP_THRESHOLD}ms)"
            FAILED=true
          fi

          if [ "$SIGNING_TIME" -gt "$SIGNING_THRESHOLD" ]; then
            echo "::error::Signing time (${SIGNING_TIME}ms) exceeds threshold (${SIGNING_THRESHOLD}ms)"
            FAILED=true
          fi

          if [ "$CLI_SIZE" -gt "$CLI_SIZE_THRESHOLD" ]; then
            echo "::error::CLI bundle size (${CLI_SIZE} bytes) exceeds threshold (${CLI_SIZE_THRESHOLD} bytes)"
            FAILED=true
          fi

          if [ "$LIB_CJS_SIZE" -gt "$LIB_CJS_THRESHOLD" ]; then
            echo "::error::Library CJS size (${LIB_CJS_SIZE} bytes) exceeds threshold (${LIB_CJS_THRESHOLD} bytes)"
            FAILED=true
          fi

          if [ "$LIB_ESM_SIZE" -gt "$LIB_ESM_THRESHOLD" ]; then
            echo "::error::Library ESM size (${LIB_ESM_SIZE} bytes) exceeds threshold (${LIB_ESM_THRESHOLD} bytes)"
            FAILED=true
          fi

          if [ "$FAILED" = "true" ]; then
            echo "::error::Performance thresholds exceeded. Build failed."
            exit 1
          else
            echo "✅ All performance thresholds met"
          fi

      - name: Generate performance report
        run: |
          echo "📋 Generating performance report..."

          cat << EOF > performance-report.md
          # Performance Report

          **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}

          ## Build Performance
          - **Build Time:** ${BUILD_TIME}ms
          - **CLI Startup Time:** ${STARTUP_TIME}ms
          - **Transaction Signing Time:** ${SIGNING_TIME}ms

          ## Bundle Sizes
          - **CLI Bundle:** ${CLI_SIZE} bytes ($(echo "scale=1; ${CLI_SIZE}/1024" | bc)KB)
          - **Library CJS:** ${LIB_CJS_SIZE} bytes ($(echo "scale=1; ${LIB_CJS_SIZE}/1024" | bc)KB)
          - **Library ESM:** ${LIB_ESM_SIZE} bytes ($(echo "scale=1; ${LIB_ESM_SIZE}/1024" | bc)KB)

          ## Thresholds
          - **Build Time Threshold:** 5000ms ✅
          - **Startup Time Threshold:** 1000ms ✅
          - **Signing Time Threshold:** 2000ms ✅
          - **CLI Size Threshold:** 500KB ✅
          - **Library CJS Threshold:** 300KB ✅
          - **Library ESM Threshold:** 300KB ✅

          ## Environment
          - **OS:** ubuntu-latest
          - **Node.js:** $(node --version)
          - **pnpm:** $(pnpm --version)
          EOF

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report-${{ github.sha }}
          path: performance-report.md
          retention-days: 90

      - name: Comment performance results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('performance-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 📊 Performance Report\n\n${report}`
            });